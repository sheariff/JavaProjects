package Client.Client_Objects;

import javafx.application.Platform;
import Client.HomeController;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.io.IOException;
import java.net.UnknownHostException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import Client.Folder.FileWatcher;
import java.io.File;

public class ClientThread implements Runnable
{
    private int port;
    private String hostName;
    private static int clientCounter;
    private int clientNumber;
    private File[] listOfFiles;
    private FileWatcher fileWatch;
    private File file;
    private Socket client;
    private OutputStream os;
    private ObjectOutputStream out;
    private ObjectInputStream inputStream;
    private boolean checkVal;
    public static int switchVal;
    public static String[] serverContents;
    public static String fileToReturn;
    public static ClientThread clientThread;
    public Thread t;
    
    static {
        ClientThread.clientCounter = 0;
        ClientThread.fileToReturn = null;
    }
    
    public ClientThread(final int port, final String hostName, final FileWatcher fileWatch, final String[] args) {
        this.port = 0;
        this.hostName = null;
        this.clientNumber = 0;
        this.listOfFiles = null;
        this.fileWatch = null;
        this.file = null;
        this.checkVal = false;
        this.port = port;
        this.hostName = hostName;
        this.fileWatch = fileWatch;
        ++ClientThread.clientCounter;
        this.clientNumber = ClientThread.clientCounter;
        if (ClientThread.clientThread == null) {
            ClientThread.clientThread = this;
        }
    }
    
    @Override
    public void run() {
        try {
            System.out.println("Starting Client " + this.clientNumber);
            System.out.println("Connecting to " + this.hostName + " on Port " + this.port);
            this.client = new Socket(this.hostName, this.port);
            System.out.println("Connected to server");
            this.os = this.client.getOutputStream();
            this.out = new ObjectOutputStream(this.os);
            this.inputStream = new ObjectInputStream(this.client.getInputStream());
            while (true) {
                this.checkServer(ClientThread.switchVal);
                ClientThread.switchVal = -1;
                while (Thread.currentThread().isInterrupted()) {}
            }
        }
        catch (UnknownHostException e) {
            e.printStackTrace();
        }
        catch (IOException e2) {
            e2.printStackTrace();
        }
        catch (ClassNotFoundException e3) {
            e3.printStackTrace();
        }
    }
    
    private void checkServer(int switchVal) throws ClassNotFoundException, IOException {
        this.out.writeInt(switchVal);
        this.out.flush();
        final boolean result = this.inputStream.readBoolean();
        if (switchVal == 2) {
            System.out.println("File send invoked");
        }
        if (result) {
            switchVal = 3;
            System.out.println(result);
        }
        switch (switchVal) {
            case 1: {
                this.receiveFile();
                break;
            }
            case 2: {
                this.receiveOneFile(ClientThread.fileToReturn);
                break;
            }
            case 3: {
                String[] receiveListOfFileNames;
                for (int length = (receiveListOfFileNames = this.receiveListOfFileNames()).length, i = 0; i < length; ++i) {
                    final String each = receiveListOfFileNames[i];
                    System.out.println(each);
                }
                break;
            }
        }
    }
    
    private void receiveFile() throws IOException, ClassNotFoundException {
        final String fileName = (String)this.inputStream.readObject();
        final byte[] content = (byte[])this.inputStream.readObject();
        final File directory = new File("C:\\Users\\Admin\\Documents\\College Documents\\Generic Eclipse Workspace\\SocketsExample\\src\\Client\\Client_Folder_" + this.clientNumber);
        if (!directory.exists()) {
            new File("C:\\Users\\Admin\\Documents\\College Documents\\Generic Eclipse Workspace\\SocketsExample\\src\\Client\\Client_Folder_" + this.clientNumber).mkdirs();
        }
        final File newFile = new File("C:\\Users\\Admin\\Documents\\College Documents\\Generic Eclipse Workspace\\SocketsExample\\src\\Client\\Client_Folder_" + this.clientNumber + "\\" + fileName);
        Files.write(newFile.toPath(), content, new OpenOption[0]);
    }
    
    private void receiveOneFile(final String name) throws IOException, ClassNotFoundException {
        System.out.println("Sent name: " + name);
        this.out.writeObject(name);
        this.receiveFile();
    }
    
    public String[] receiveListOfFileNames() throws IOException, ClassNotFoundException {
        final String[] fileNames = ClientThread.serverContents = (String[])this.inputStream.readObject();
        System.out.println("Case 3");
        if (HomeController.homeController != null) {
            Platform.runLater((Runnable)new ClientThread.ClientThread$1(this, fileNames));
        }
        return fileNames;
    }
    
    public void downloadFile(final String fileToReturn) throws IOException, ClassNotFoundException {
        System.out.println(fileToReturn);
        if (!this.t.isInterrupted()) {
            this.t.interrupt();
        }
        this.out.writeInt(2);
        this.out.flush();
        final boolean result = this.inputStream.readBoolean();
        if (result) {
            this.receiveListOfFileNames();
            this.downloadFile(fileToReturn);
        }
        else {
            this.receiveOneFile(fileToReturn);
            Thread.interrupted();
        }
    }
}